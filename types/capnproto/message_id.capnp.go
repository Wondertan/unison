// Code generated by capnpc-go. DO NOT EDIT.

package message_id

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type MessageID capnp.Struct

// MessageID_TypeID is the unique identifier for the type MessageID.
const MessageID_TypeID = 0xa97f8bc5f851ade0

func NewMessageID(s *capnp.Segment) (MessageID, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MessageID(st), err
}

func NewRootMessageID(s *capnp.Segment) (MessageID, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return MessageID(st), err
}

func ReadRootMessageID(msg *capnp.Message) (MessageID, error) {
	root, err := msg.Root()
	return MessageID(root.Struct()), err
}

func (s MessageID) String() string {
	str, _ := text.Marshal(0xa97f8bc5f851ade0, capnp.Struct(s))
	return str
}

func (s MessageID) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (MessageID) DecodeFromPtr(p capnp.Ptr) MessageID {
	return MessageID(capnp.Struct{}.DecodeFromPtr(p))
}

func (s MessageID) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s MessageID) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s MessageID) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s MessageID) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s MessageID) Round() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s MessageID) SetRound(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s MessageID) Signer() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s MessageID) HasSigner() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s MessageID) SetSigner(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

func (s MessageID) Hash() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return []byte(p.Data()), err
}

func (s MessageID) HasHash() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s MessageID) SetHash(v []byte) error {
	return capnp.Struct(s).SetData(1, v)
}

// MessageID_List is a list of MessageID.
type MessageID_List = capnp.StructList[MessageID]

// NewMessageID creates a new list of MessageID.
func NewMessageID_List(s *capnp.Segment, sz int32) (MessageID_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[MessageID](l), err
}

// MessageID_Future is a wrapper for a MessageID promised by a client call.
type MessageID_Future struct{ *capnp.Future }

func (f MessageID_Future) Struct() (MessageID, error) {
	p, err := f.Future.Ptr()
	return MessageID(p.Struct()), err
}

const schema_d5d5bfc56971e700 = "x\xda4\xc8\xbdJ\xc3P\x18\x06\xe0\xf7\xfdNj)" +
	"\x18\xea\x81l\x0e\xee\x05\x95:v\xb1C\x05\x0b\x16\xfa" +
	"\x81\xbb\x04sH2\x98\xbf\xa3\xb3\x17\xe0\x958\x88\x97" +
	"\x90)\x17\xe0\x90\xdd\xcd[p2\x12\xc1\xf1y\x8e\xea" +
	"u\xb0\x0c[B4\x9a\x1c\x0c\x9fo\xfa\xdd\xbd<\xbf" +
	"B\x8f\xc9\x9f\xaf:\xef\xda\xbe\x9f\xc8\x14Xv\x0b\xda" +
	"~\x0a\xd8\x8fw\x9c\x0e\xf7qUTM\xf9h\xca\xf3" +
	"\x07\xe7}\x9c\xba\xbb<9\xfb\xdb\xd5n\x8cy\xea\xb6" +
	"\x9b=\xa9\x87&\x00\x02\x02\xf6\xea\x02\xd0\xb5\xa1\xde\x08" +
	"\xc9\x88\xe3mW\x80n\x0cu/\xb4\xc2\x88\x02\xd8\xdd" +
	"\x02\xd0kC\xbd\x15\x9e4\xe5S\x91p\x06\xe1\x0c\xbc" +
	"\xf4yZ\xb8\x86!\x84!8\xcfb\x9f\xfd\xe37\x00" +
	"\x00\xff\xff\x0c\xcb/\x1a"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d5d5bfc56971e700,
		Nodes: []uint64{
			0xa97f8bc5f851ade0,
		},
		Compressed: true,
	})
}
